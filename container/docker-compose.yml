---
services:
  stockanalyst:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_UID: ${USER_UID:-1000}
        USER_GID: ${USER_GID:-1000}
    container_name: stockdev
    ports:
      - "5000:5000"
      - "3002:3000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_APP=app.py
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - FMP_API_KEY=${FMP_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_PATH=./stock_analysis.db
      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER:-true}
      - DISABLE_WEBAPP_SCHEDULER=${DISABLE_WEBAPP_SCHEDULER:-false}
      - NODE_ENV=development
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./data:/app/data
      - ./app:/app
      - /mnt/c/Users/Vincenzo/Unity:/Unity
      - node-cache:/home/developer/.npm
    working_dir: /app
    restart: unless-stopped
    tty: true
    stdin_open: true
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - stockanalyst-network

  nginx:
    image: nginx:alpine
    container_name: stockanalyst-nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      - UPSTREAM_HOST=${UPSTREAM_HOST:-stockanalyst}
      - UPSTREAM_PORT=${UPSTREAM_PORT:-5000}
    volumes:
      - ./nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - stockanalyst
    restart: unless-stopped
    networks:
      - stockanalyst-network
    profiles:
      - production

  postgres:
    image: postgres:15-alpine
    container_name: stockanalyst-db
    environment:
      - POSTGRES_DB=stockanalyst
      - POSTGRES_USER=stockanalyst
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - stockanalyst-network
    profiles:
      - postgres

volumes:
  stockanalyst_data:
    driver: local
  postgres_data:
    driver: local
  node-cache:

networks:
  stockanalyst-network:
    driver: bridge
