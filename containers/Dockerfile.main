# Base builder stage
FROM python:3.12-slim AS builder

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create and activate virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
WORKDIR /tmp
COPY requirements.txt ./requirements.txt
RUN pip install --upgrade pip \
    && pip install -r requirements.txt

# Common production base stage
FROM python:3.12-slim AS base
# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for production
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Create non-root user for security
ARG USER_UID=1000
ARG USER_GID=1000
ARG DOCKER_GID=999
RUN groupadd --gid ${USER_GID} ops \
    && useradd --uid ${USER_UID} --gid ${USER_GID} --shell /bin/bash --create-home ops

# Copy virtual environment from builder stage
COPY --from=builder --chown=ops:ops /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory  
WORKDIR /app
COPY --chown=ops:ops app/ /app/

# Create necessary directories with correct ownership
RUN mkdir -p /app/data /app/logs && chown -R ops:ops /app/data /app/logs

# Switch to non-root user
USER ops

# Declare volumes
VOLUME ["/app/data", "/app/logs"]

# Development base stage with AI tools
FROM base AS dev-base
# Switch back to root to install development tools
USER root

# Install Node.js, npm, and other development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    nodejs \
    npm \
    git \
    wget \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Docker using the official installation script
RUN curl -fsSL https://get.docker.com -o get-docker.sh \
    && sh ./get-docker.sh \
    && rm get-docker.sh \
    && if [ "$(getent group docker | cut -d: -f3)" != "${DOCKER_GID}" ]; then \
         if getent group ${DOCKER_GID} >/dev/null 2>&1; then \
           groupdel $(getent group ${DOCKER_GID} | cut -d: -f1) || true; \
         fi; \
         groupmod -g ${DOCKER_GID} docker; \
       fi \
    && usermod -aG docker ops

# Switch to ops user for npm installations
USER ops

# Set npm configuration for the user
ENV NPM_CONFIG_PREFIX=/home/ops/.npm-global
ENV PATH=$NPM_CONFIG_PREFIX/bin:$PATH

# Create npm global directory
RUN mkdir -p /home/ops/.npm-global

# Install AI CLI tools globally
RUN npm install -g @anthropic-ai/claude-code @google/gemini-cli ccusage

# Set custom prompt for development containers
RUN echo 'if [[ "$-" == *i* ]]; then export PS1="\[\033[01;32m\]ops@\${CONTAINER_NAME:-\h}\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "; fi' >> /home/ops/.bashrc

# Production webapp stage
FROM base AS webapp
WORKDIR /app
# Set environment variables for production
ENV FLASK_APP=app.py     FLASK_ENV=production

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/ || exit 1

# Default command - start webapp only
CMD ["python", "webapp_launcher.py", "--mode", "production"]

# Development webapp stage
FROM dev-base AS webapp-dev
WORKDIR /app
# Set environment variables for development
ENV FLASK_APP=app.py     FLASK_ENV=development

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/ || exit 1

# Default command - start webapp in development mode
CMD ["python", "webapp_launcher.py", "--mode", "development"]

# Production scheduler stage
FROM base AS scheduler
# Health check - verify scheduler is running
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
    CMD python -c "import scheduler; print('Scheduler running')" || exit 1

# Default command - run scheduler in foreground
CMD ["python", "scheduler.py", "run-internal"]

# Development scheduler stage
FROM dev-base AS scheduler-dev
# Health check - verify scheduler is running
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
    CMD python -c "import scheduler; print('Scheduler running')" || exit 1

# Default command - run scheduler in foreground
CMD ["python", "scheduler.py", "run-internal"]
